% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/combn_pair2.R
\name{combn_pair2}
\alias{combn_pair2}
\title{Combine and Reshape Data by Specified Columns}
\usage{
combn_pair2(data, cols2bind, by, nest_type = "dt")
}
\arguments{
\item{data}{A data frame or data table containing the input data}

\item{cols2bind}{A single column name or index to use for binding/grouping}

\item{by}{A vector of column names or indices representing traits to be combined}

\item{nest_type}{The type of nested data structure to return.
Options are "dt" (data.table) or "df" (data frame). Defaults to "dt".}
}
\value{
A data.table with two columns:
\itemize{
\item \code{trait}: The trait identifier
\item \code{data}: A list column containing nested data structures
}
}
\description{
Transforms a wide-format dataset into a nested data structure by combining
specified columns and grouping by traits.
}
\details{
The function performs the following operations:
\itemize{
\item Converts input to data.table format
\item Validates input columns
\item Reshapes data to long format using \code{melt()}
\item Casts data to wide format using \code{dcast()}
\item Creates a nested data structure grouped by traits
}
}
\note{
\itemize{
\item Supports both numeric indices and column names for \code{cols2bind} and \code{by}
\item Automatically detects and preserves ID columns
\item Allows flexible reshaping of data with different nesting options
}
}
\examples{
# Sample data
data <- data.frame(
  breed = c("A", "B", "A", "B"), 
  sex = c("F", "F", "M", "M"), 
  trait1 = c(1.1, 2.1, 3.5, 4.6),
  trait2 = c(5.2, 6.6, 7.3, 8.6))
# Method 1: Using combn_pair2() with data.table
# Combine by breed, grouping traits
combn_pair2(data, cols2bind = "breed", by = c("trait1", "trait2"))

# Return as data frame nested structure
combn_pair2(data, cols2bind = "breed", 
                           by = c("trait1", "trait2"), 
                           nest_type = "df")
# Method 2: Using tidyr and dplyr for similar transformation
data |>
  tidyr::pivot_longer(cols = c("trait1", "trait2"), names_to = "name", values_to = "value") |>
  tidyr::pivot_wider(names_from = "breed", values_from = "value") |>
  dplyr::group_nest(name)
}
