% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/convert_nest.R
\name{convert_nest}
\alias{convert_nest}
\title{Convert Nested Columns Between \code{data.frame} and \code{data.table}}
\usage{
convert_nest(data, to = c("df", "dt"), nest_cols = NULL)
}
\arguments{
\item{data}{A \code{data.frame} or \code{data.table} containing nested columns}

\item{to}{A \code{character} string specifying the target format.
Options are \code{"df"} (data frame) or \code{"dt"} (data table). Defaults to \code{"df"}.}

\item{nest_cols}{A \code{character} vector of column names containing nested data.
If \code{NULL}, the function automatically detects list columns.}
}
\value{
A transformed \code{data.frame} or \code{data.table} with nested columns converted to the specified format.
}
\description{
Transforms a \code{data.frame} or \code{data.table} by converting nested columns
to either \code{data.frame} or \code{data.table} format while preserving the original data structure.
}
\details{
Advanced Nested Column Conversion Features:
\itemize{
\item Intelligent automatic detection of nested columns
\item Comprehensive conversion of entire data structure
\item Selective conversion of specified nested columns
\item Non-destructive transformation with data copying
}

Conversion Strategies:
\enumerate{
\item Nested column identification based on \code{is.list()} detection
\item Preservation of original data integrity
\item Flexible handling of mixed data structures
\item Consistent type conversion across nested elements
}

Nested Column Handling:
\itemize{
\item Supports conversion of \code{list} columns
\item Handles \code{data.table}, \code{data.frame}, and generic \code{list} inputs
\item Maintains original column structure and order
\item Prevents in-place modification of source data
}
}
\note{
Conversion Characteristics:
\itemize{
\item Non-destructive transformation of nested columns
\item Supports flexible input and output formats
\item Intelligent type detection and conversion
\item Minimal performance overhead
}
}
\examples{
# Convert a data frame with nested columns to data table
df_nest1 <- iris |> 
  dplyr::group_nest(Species)
df_nest1
df_nest2 <- iris |>
  dplyr::group_nest(Species) |>
  dplyr::mutate(data2 = purrr::map(data, dplyr::mutate, c=2))
df_nest2
# Convert a data table with specific nested columns to data frame
convert_nest(df_nest1, to = "dt", nest_cols = c("data"))
convert_nest(df_nest2, to = "dt", nest_cols = c("data", "data2"))
# Convert a data table with nested columns to data frame
dt_nest <- mintyr::w2l_nest(data = iris, cols2l = 1:2, by = "Species")
convert_nest(dt_nest, to = "df", nest_cols = c("data"))
}
\seealso{
\itemize{
\item \code{\link[data.table:as.data.table]{data.table::as.data.table()}}
\item \code{\link[tibble:as_tibble]{tibble::as_tibble()}}
}
}
