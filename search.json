[{"path":"https://tony2015116.github.io/mintyr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 John Doe Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://tony2015116.github.io/mintyr/articles/get-started.html","id":"mintyr_example","dir":"Articles","previous_headings":"","what":"mintyr_example","title":"Get started","text":"","code":"mintyr_example(\"csv_test1.csv\") #> [1] \"/home/runner/work/_temp/Library/mintyr/extdata/csv_test1.csv\""},{"path":"https://tony2015116.github.io/mintyr/articles/get-started.html","id":"mintyr_examples","dir":"Articles","previous_headings":"","what":"mintyr_examples","title":"Get started","text":"","code":"mintyr_examples() #> [1] \"csv_test1.csv\"   \"csv_test2.csv\"   \"xlsx_test1.xlsx\" \"xlsx_test2.xlsx\""},{"path":"https://tony2015116.github.io/mintyr/articles/get-started.html","id":"import_xlsx","dir":"Articles","previous_headings":"","what":"import_xlsx","title":"Get started","text":"","code":"xlsx_files <- mintyr_example(mintyr_examples(\"xlsx_test\")) xlsx_files #> [1] \"/home/runner/work/_temp/Library/mintyr/extdata/xlsx_test1.xlsx\" #> [2] \"/home/runner/work/_temp/Library/mintyr/extdata/xlsx_test2.xlsx\" import_xlsx(xlsx_files) #>     excel_name sheet_name  col1   col2   col3 #>         <char>     <char> <num> <char> <lgcl> #>  1: xlsx_test1     Sheet1     4      d  FALSE #>  2: xlsx_test1     Sheet1     5      f   TRUE #>  3: xlsx_test1     Sheet1     6      e   TRUE #>  4: xlsx_test1     Sheet2     1      a   TRUE #>  5: xlsx_test1     Sheet2     2      b  FALSE #>  6: xlsx_test1     Sheet2     3      c   TRUE #>  7: xlsx_test2     Sheet1    15      o  FALSE #>  8: xlsx_test2     Sheet1    16      p   TRUE #>  9: xlsx_test2     Sheet1    17      q  FALSE #> 10: xlsx_test2          a     7      g  FALSE #> 11: xlsx_test2          a     9      h   TRUE #> 12: xlsx_test2          a     8      i  FALSE #> 13: xlsx_test2          b    10      J  FALSE #> 14: xlsx_test2          b    11      K   TRUE #> 15: xlsx_test2          b    12      L  FALSE"},{"path":"https://tony2015116.github.io/mintyr/articles/get-started.html","id":"import_csv","dir":"Articles","previous_headings":"","what":"import_csv","title":"Get started","text":"first tool wonderful package. can add 1 value using function add_one().","code":"csv_files <- mintyr_example(mintyr_examples(\"csv_test\")) csv_files #> [1] \"/home/runner/work/_temp/Library/mintyr/extdata/csv_test1.csv\" #> [2] \"/home/runner/work/_temp/Library/mintyr/extdata/csv_test2.csv\" import_csv(csv_files) #>     col1   col2   col3 #>    <int> <char> <lgcl> #> 1:     4      d  FALSE #> 2:     5      f   TRUE #> 3:     6      e   TRUE #> 4:    15      o  FALSE #> 5:    16      p   TRUE #> 6:    17      q  FALSE"},{"path":"https://tony2015116.github.io/mintyr/articles/get-started.html","id":"get_filename","dir":"Articles","previous_headings":"","what":"get_filename","title":"Get started","text":"","code":"xlsx_files <- mintyr_example(mintyr_examples(\"xlsx_test\")) xlsx_files #> [1] \"/home/runner/work/_temp/Library/mintyr/extdata/xlsx_test1.xlsx\" #> [2] \"/home/runner/work/_temp/Library/mintyr/extdata/xlsx_test2.xlsx\" get_filename(xlsx_files) #> [1] \"xlsx_test1\" \"xlsx_test2\" get_filename(xlsx_files, remove_extension = FALSE) #> [1] \"xlsx_test1.xlsx\" \"xlsx_test2.xlsx\" get_filename(xlsx_files, remove_path = FALSE) #> [1] \"/home/runner/work/_temp/Library/mintyr/extdata/xlsx_test1\" #> [2] \"/home/runner/work/_temp/Library/mintyr/extdata/xlsx_test2\""},{"path":"https://tony2015116.github.io/mintyr/articles/get-started.html","id":"w2l_nest","dir":"Articles","previous_headings":"","what":"w2l_nest","title":"Get started","text":"","code":"w2l_nest(data = iris, cols2l = 1:4) #>            name                data #>          <fctr>              <list> #> 1: Sepal.Length <data.table[150x2]> #> 2:  Sepal.Width <data.table[150x2]> #> 3: Petal.Length <data.table[150x2]> #> 4:  Petal.Width <data.table[150x2]> w2l_nest(data = iris, cols2l = c(\"Sepal.Length\", \"Sepal.Width\", \"Petal.Length\"), by = \"Species\") #>            name    Species               data #>          <fctr>     <fctr>             <list> #> 1: Sepal.Length     setosa <data.table[50x2]> #> 2: Sepal.Length versicolor <data.table[50x2]> #> 3: Sepal.Length  virginica <data.table[50x2]> #> 4:  Sepal.Width     setosa <data.table[50x2]> #> 5:  Sepal.Width versicolor <data.table[50x2]> #> 6:  Sepal.Width  virginica <data.table[50x2]> #> 7: Petal.Length     setosa <data.table[50x2]> #> 8: Petal.Length versicolor <data.table[50x2]> #> 9: Petal.Length  virginica <data.table[50x2]>"},{"path":"https://tony2015116.github.io/mintyr/articles/get-started.html","id":"w2l_split","dir":"Articles","previous_headings":"","what":"w2l_split","title":"Get started","text":"","code":"w2l_split(data = iris, cols2l = 1:3) #> $Sepal.Length #>      Petal.Width   Species     variable value #>            <num>    <fctr>       <fctr> <num> #>   1:         0.2    setosa Sepal.Length   5.1 #>   2:         0.2    setosa Sepal.Length   4.9 #>   3:         0.2    setosa Sepal.Length   4.7 #>   4:         0.2    setosa Sepal.Length   4.6 #>   5:         0.2    setosa Sepal.Length   5.0 #>  ---                                          #> 146:         2.3 virginica Sepal.Length   6.7 #> 147:         1.9 virginica Sepal.Length   6.3 #> 148:         2.0 virginica Sepal.Length   6.5 #> 149:         2.3 virginica Sepal.Length   6.2 #> 150:         1.8 virginica Sepal.Length   5.9 #>  #> $Sepal.Width #>      Petal.Width   Species    variable value #>            <num>    <fctr>      <fctr> <num> #>   1:         0.2    setosa Sepal.Width   3.5 #>   2:         0.2    setosa Sepal.Width   3.0 #>   3:         0.2    setosa Sepal.Width   3.2 #>   4:         0.2    setosa Sepal.Width   3.1 #>   5:         0.2    setosa Sepal.Width   3.6 #>  ---                                         #> 146:         2.3 virginica Sepal.Width   3.0 #> 147:         1.9 virginica Sepal.Width   2.5 #> 148:         2.0 virginica Sepal.Width   3.0 #> 149:         2.3 virginica Sepal.Width   3.4 #> 150:         1.8 virginica Sepal.Width   3.0 #>  #> $Petal.Length #>      Petal.Width   Species     variable value #>            <num>    <fctr>       <fctr> <num> #>   1:         0.2    setosa Petal.Length   1.4 #>   2:         0.2    setosa Petal.Length   1.4 #>   3:         0.2    setosa Petal.Length   1.3 #>   4:         0.2    setosa Petal.Length   1.5 #>   5:         0.2    setosa Petal.Length   1.4 #>  ---                                          #> 146:         2.3 virginica Petal.Length   5.2 #> 147:         1.9 virginica Petal.Length   5.0 #> 148:         2.0 virginica Petal.Length   5.2 #> 149:         2.3 virginica Petal.Length   5.4 #> 150:         1.8 virginica Petal.Length   5.1 w2l_split(data = iris, cols2l = c(\"Sepal.Length\", \"Sepal.Width\")) #> $Sepal.Length #>      Petal.Length Petal.Width   Species     variable value #>             <num>       <num>    <fctr>       <fctr> <num> #>   1:          1.4         0.2    setosa Sepal.Length   5.1 #>   2:          1.4         0.2    setosa Sepal.Length   4.9 #>   3:          1.3         0.2    setosa Sepal.Length   4.7 #>   4:          1.5         0.2    setosa Sepal.Length   4.6 #>   5:          1.4         0.2    setosa Sepal.Length   5.0 #>  ---                                                       #> 146:          5.2         2.3 virginica Sepal.Length   6.7 #> 147:          5.0         1.9 virginica Sepal.Length   6.3 #> 148:          5.2         2.0 virginica Sepal.Length   6.5 #> 149:          5.4         2.3 virginica Sepal.Length   6.2 #> 150:          5.1         1.8 virginica Sepal.Length   5.9 #>  #> $Sepal.Width #>      Petal.Length Petal.Width   Species    variable value #>             <num>       <num>    <fctr>      <fctr> <num> #>   1:          1.4         0.2    setosa Sepal.Width   3.5 #>   2:          1.4         0.2    setosa Sepal.Width   3.0 #>   3:          1.3         0.2    setosa Sepal.Width   3.2 #>   4:          1.5         0.2    setosa Sepal.Width   3.1 #>   5:          1.4         0.2    setosa Sepal.Width   3.6 #>  ---                                                      #> 146:          5.2         2.3 virginica Sepal.Width   3.0 #> 147:          5.0         1.9 virginica Sepal.Width   2.5 #> 148:          5.2         2.0 virginica Sepal.Width   3.0 #> 149:          5.4         2.3 virginica Sepal.Width   3.4 #> 150:          5.1         1.8 virginica Sepal.Width   3.0"},{"path":"https://tony2015116.github.io/mintyr/articles/get-started.html","id":"combn_pair","dir":"Articles","previous_headings":"","what":"combn_pair","title":"Get started","text":"","code":"col_names <- c(\"Sepal.Length\", \"Sepal.Width\", \"Petal.Length\") combn_pair(iris, cols_bind = col_names, pairs_n = 2, sep = \"&\") #>                        pairs                data #>                       <char>              <list> #> 1:  Sepal.Length&Sepal.Width <data.table[150x4]> #> 2: Sepal.Length&Petal.Length <data.table[150x4]> #> 3:  Sepal.Width&Petal.Length <data.table[150x4]> combn_pair(iris, cols_bind = col_names, pairs_n = 2, by = \"Species\") #>                        pairs    Species               data #>                       <char>     <fctr>             <list> #> 1:  Sepal.Length-Sepal.Width     setosa <data.table[50x3]> #> 2:  Sepal.Length-Sepal.Width versicolor <data.table[50x3]> #> 3:  Sepal.Length-Sepal.Width  virginica <data.table[50x3]> #> 4: Sepal.Length-Petal.Length     setosa <data.table[50x3]> #> 5: Sepal.Length-Petal.Length versicolor <data.table[50x3]> #> 6: Sepal.Length-Petal.Length  virginica <data.table[50x3]> #> 7:  Sepal.Width-Petal.Length     setosa <data.table[50x3]> #> 8:  Sepal.Width-Petal.Length versicolor <data.table[50x3]> #> 9:  Sepal.Width-Petal.Length  virginica <data.table[50x3]>"},{"path":"https://tony2015116.github.io/mintyr/articles/get-started.html","id":"nest_cv","dir":"Articles","previous_headings":"","what":"nest_cv","title":"Get started","text":"","code":"dt_nest <- w2l_nest(data = iris, cols2l = 1:2, by = \"Species\") nest_cv(nest_dt = dt_nest, v = 2, repeats = 2) #>             name    Species                   splits     id              train #>           <fctr>     <fctr>                   <list> <char>             <list> #>  1: Sepal.Length     setosa <vfold_split[45x5x50x3]> Fold01 <data.table[45x3]> #>  2: Sepal.Length     setosa <vfold_split[45x5x50x3]> Fold02 <data.table[45x3]> #>  3: Sepal.Length     setosa <vfold_split[45x5x50x3]> Fold03 <data.table[45x3]> #>  4: Sepal.Length     setosa <vfold_split[45x5x50x3]> Fold04 <data.table[45x3]> #>  5: Sepal.Length     setosa <vfold_split[45x5x50x3]> Fold05 <data.table[45x3]> #>  6: Sepal.Length     setosa <vfold_split[45x5x50x3]> Fold06 <data.table[45x3]> #>  7: Sepal.Length     setosa <vfold_split[45x5x50x3]> Fold07 <data.table[45x3]> #>  8: Sepal.Length     setosa <vfold_split[45x5x50x3]> Fold08 <data.table[45x3]> #>  9: Sepal.Length     setosa <vfold_split[45x5x50x3]> Fold09 <data.table[45x3]> #> 10: Sepal.Length     setosa <vfold_split[45x5x50x3]> Fold10 <data.table[45x3]> #> 11: Sepal.Length versicolor <vfold_split[45x5x50x3]> Fold01 <data.table[45x3]> #> 12: Sepal.Length versicolor <vfold_split[45x5x50x3]> Fold02 <data.table[45x3]> #> 13: Sepal.Length versicolor <vfold_split[45x5x50x3]> Fold03 <data.table[45x3]> #> 14: Sepal.Length versicolor <vfold_split[45x5x50x3]> Fold04 <data.table[45x3]> #> 15: Sepal.Length versicolor <vfold_split[45x5x50x3]> Fold05 <data.table[45x3]> #> 16: Sepal.Length versicolor <vfold_split[45x5x50x3]> Fold06 <data.table[45x3]> #> 17: Sepal.Length versicolor <vfold_split[45x5x50x3]> Fold07 <data.table[45x3]> #> 18: Sepal.Length versicolor <vfold_split[45x5x50x3]> Fold08 <data.table[45x3]> #> 19: Sepal.Length versicolor <vfold_split[45x5x50x3]> Fold09 <data.table[45x3]> #> 20: Sepal.Length versicolor <vfold_split[45x5x50x3]> Fold10 <data.table[45x3]> #> 21: Sepal.Length  virginica <vfold_split[45x5x50x3]> Fold01 <data.table[45x3]> #> 22: Sepal.Length  virginica <vfold_split[45x5x50x3]> Fold02 <data.table[45x3]> #> 23: Sepal.Length  virginica <vfold_split[45x5x50x3]> Fold03 <data.table[45x3]> #> 24: Sepal.Length  virginica <vfold_split[45x5x50x3]> Fold04 <data.table[45x3]> #> 25: Sepal.Length  virginica <vfold_split[45x5x50x3]> Fold05 <data.table[45x3]> #> 26: Sepal.Length  virginica <vfold_split[45x5x50x3]> Fold06 <data.table[45x3]> #> 27: Sepal.Length  virginica <vfold_split[45x5x50x3]> Fold07 <data.table[45x3]> #> 28: Sepal.Length  virginica <vfold_split[45x5x50x3]> Fold08 <data.table[45x3]> #> 29: Sepal.Length  virginica <vfold_split[45x5x50x3]> Fold09 <data.table[45x3]> #> 30: Sepal.Length  virginica <vfold_split[45x5x50x3]> Fold10 <data.table[45x3]> #> 31:  Sepal.Width     setosa <vfold_split[45x5x50x3]> Fold01 <data.table[45x3]> #> 32:  Sepal.Width     setosa <vfold_split[45x5x50x3]> Fold02 <data.table[45x3]> #> 33:  Sepal.Width     setosa <vfold_split[45x5x50x3]> Fold03 <data.table[45x3]> #> 34:  Sepal.Width     setosa <vfold_split[45x5x50x3]> Fold04 <data.table[45x3]> #> 35:  Sepal.Width     setosa <vfold_split[45x5x50x3]> Fold05 <data.table[45x3]> #> 36:  Sepal.Width     setosa <vfold_split[45x5x50x3]> Fold06 <data.table[45x3]> #> 37:  Sepal.Width     setosa <vfold_split[45x5x50x3]> Fold07 <data.table[45x3]> #> 38:  Sepal.Width     setosa <vfold_split[45x5x50x3]> Fold08 <data.table[45x3]> #> 39:  Sepal.Width     setosa <vfold_split[45x5x50x3]> Fold09 <data.table[45x3]> #> 40:  Sepal.Width     setosa <vfold_split[45x5x50x3]> Fold10 <data.table[45x3]> #> 41:  Sepal.Width versicolor <vfold_split[45x5x50x3]> Fold01 <data.table[45x3]> #> 42:  Sepal.Width versicolor <vfold_split[45x5x50x3]> Fold02 <data.table[45x3]> #> 43:  Sepal.Width versicolor <vfold_split[45x5x50x3]> Fold03 <data.table[45x3]> #> 44:  Sepal.Width versicolor <vfold_split[45x5x50x3]> Fold04 <data.table[45x3]> #> 45:  Sepal.Width versicolor <vfold_split[45x5x50x3]> Fold05 <data.table[45x3]> #> 46:  Sepal.Width versicolor <vfold_split[45x5x50x3]> Fold06 <data.table[45x3]> #> 47:  Sepal.Width versicolor <vfold_split[45x5x50x3]> Fold07 <data.table[45x3]> #> 48:  Sepal.Width versicolor <vfold_split[45x5x50x3]> Fold08 <data.table[45x3]> #> 49:  Sepal.Width versicolor <vfold_split[45x5x50x3]> Fold09 <data.table[45x3]> #> 50:  Sepal.Width versicolor <vfold_split[45x5x50x3]> Fold10 <data.table[45x3]> #> 51:  Sepal.Width  virginica <vfold_split[45x5x50x3]> Fold01 <data.table[45x3]> #> 52:  Sepal.Width  virginica <vfold_split[45x5x50x3]> Fold02 <data.table[45x3]> #> 53:  Sepal.Width  virginica <vfold_split[45x5x50x3]> Fold03 <data.table[45x3]> #> 54:  Sepal.Width  virginica <vfold_split[45x5x50x3]> Fold04 <data.table[45x3]> #> 55:  Sepal.Width  virginica <vfold_split[45x5x50x3]> Fold05 <data.table[45x3]> #> 56:  Sepal.Width  virginica <vfold_split[45x5x50x3]> Fold06 <data.table[45x3]> #> 57:  Sepal.Width  virginica <vfold_split[45x5x50x3]> Fold07 <data.table[45x3]> #> 58:  Sepal.Width  virginica <vfold_split[45x5x50x3]> Fold08 <data.table[45x3]> #> 59:  Sepal.Width  virginica <vfold_split[45x5x50x3]> Fold09 <data.table[45x3]> #> 60:  Sepal.Width  virginica <vfold_split[45x5x50x3]> Fold10 <data.table[45x3]> #>             name    Species                   splits     id              train #>              validate #>                <list> #>  1: <data.table[5x3]> #>  2: <data.table[5x3]> #>  3: <data.table[5x3]> #>  4: <data.table[5x3]> #>  5: <data.table[5x3]> #>  6: <data.table[5x3]> #>  7: <data.table[5x3]> #>  8: <data.table[5x3]> #>  9: <data.table[5x3]> #> 10: <data.table[5x3]> #> 11: <data.table[5x3]> #> 12: <data.table[5x3]> #> 13: <data.table[5x3]> #> 14: <data.table[5x3]> #> 15: <data.table[5x3]> #> 16: <data.table[5x3]> #> 17: <data.table[5x3]> #> 18: <data.table[5x3]> #> 19: <data.table[5x3]> #> 20: <data.table[5x3]> #> 21: <data.table[5x3]> #> 22: <data.table[5x3]> #> 23: <data.table[5x3]> #> 24: <data.table[5x3]> #> 25: <data.table[5x3]> #> 26: <data.table[5x3]> #> 27: <data.table[5x3]> #> 28: <data.table[5x3]> #> 29: <data.table[5x3]> #> 30: <data.table[5x3]> #> 31: <data.table[5x3]> #> 32: <data.table[5x3]> #> 33: <data.table[5x3]> #> 34: <data.table[5x3]> #> 35: <data.table[5x3]> #> 36: <data.table[5x3]> #> 37: <data.table[5x3]> #> 38: <data.table[5x3]> #> 39: <data.table[5x3]> #> 40: <data.table[5x3]> #> 41: <data.table[5x3]> #> 42: <data.table[5x3]> #> 43: <data.table[5x3]> #> 44: <data.table[5x3]> #> 45: <data.table[5x3]> #> 46: <data.table[5x3]> #> 47: <data.table[5x3]> #> 48: <data.table[5x3]> #> 49: <data.table[5x3]> #> 50: <data.table[5x3]> #> 51: <data.table[5x3]> #> 52: <data.table[5x3]> #> 53: <data.table[5x3]> #> 54: <data.table[5x3]> #> 55: <data.table[5x3]> #> 56: <data.table[5x3]> #> 57: <data.table[5x3]> #> 58: <data.table[5x3]> #> 59: <data.table[5x3]> #> 60: <data.table[5x3]> #>              validate"},{"path":"https://tony2015116.github.io/mintyr/articles/get-started.html","id":"top_perc","dir":"Articles","previous_headings":"","what":"top_perc","title":"Get started","text":"’s ! end documented story package. components .","code":"top_perc(iris, perc = 0.5, trait = \"Petal.Width\", by = \"Species\") #> # A tibble: 3 × 6 #>   Species    variable        n  mean    sd top_perc #>   <fct>      <fct>       <dbl> <dbl> <dbl> <chr>    #> 1 setosa     Petal.Width    45 0.262 0.098 50%      #> 2 versicolor Petal.Width    35 1.43  0.13  50%      #> 3 virginica  Petal.Width    29 2.22  0.165 50%"},{"path":"https://tony2015116.github.io/mintyr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Guo Meng. Author, maintainer. Guo Meng. Copyright holder.","code":""},{"path":"https://tony2015116.github.io/mintyr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Guo Meng (2024). mintyr: Auxiliary Functions Genome Selection Analysis Using R. R package version 0.0.1, https://tony2015116.github.io/mintyr/, https://github.com/tony2015116/mintyr.","code":"@Manual{,   title = {mintyr: Auxiliary Functions for Genome Selection Analysis Using R},   author = {{Guo Meng}},   year = {2024},   note = {R package version 0.0.1, https://tony2015116.github.io/mintyr/},   url = {https://github.com/tony2015116/mintyr}, }"},{"path":"https://tony2015116.github.io/mintyr/index.html","id":"mintyr-","dir":"","previous_headings":"","what":"Auxiliary Functions for Genome Selection Analysis Using R","title":"Auxiliary Functions for Genome Selection Analysis Using R","text":"mintyr R package enables automatic monitor stations pigs pig farm using nedap pig performance test stations.station_monitor() can monitor number pigs within testing station, total feed intake, total visit time, total visit frequency, overall weight condition. fid_monitor() can monitor feed intake proportion pig within single testing station.table_monitor() can monitor several informations table fromat.monitor_schedule() packages previous two functions one can set monitor regular basis.","code":""},{"path":"https://tony2015116.github.io/mintyr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Auxiliary Functions for Genome Selection Analysis Using R","text":"can install development version GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"tony2015116/mintyr\") # install.packages(\"pak\") pak::pak(\"tony2015116/mintyr\")"},{"path":"https://tony2015116.github.io/mintyr/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Auxiliary Functions for Genome Selection Analysis Using R","text":"basic example shows download pig performance test CSVs data:","code":"# Require packages library(pptsdm)  # Load CSV data csv_files <- list.files(\"path/to/csv/data\", full.names = T, pattern = \".csv\", recursive = T) csv_data <- pptsda::import_csv(csv_files, package = \"data.table\")  # Feed intake monitor fid_monitor(data = csv_data, station_type = \"nedap\", save_path = \"C:/Users/Dell/Downloads/test\")  # Station monitor station_monitor(data = csv_data, station_type = \"nedap\", save_path = \"C:/Users/Dell/Downloads/test\")  # Monitor station and data in Excel res <- table_monitor(data = csv_data, days = n, save_path = \"C:/Users/Dell/Downloads/test\") # Monitor the number of times 'na' appears in the last n days head(res$responder_na) # Monitor the percentage of extreme weight records in the last n days head(res$extreme_weight) # Monitor the visiting time and frequency of pigs in the last n days head(res$feed_time_n) # Monitor the low feedintake over the last n days head(res$low_feedintake) # Monitor the total feed intake over the last n days head(res$all_feedintake) # Monitor the average feed intake over the last n days head(res$mean_feedintake) # Monitor the average weight per pen over the last n days head(res$house_weight) # Monitor visit time in each hour over the last 1 day. head(res$visit_n_hour) # Monitor feed intake time in each hour over the last 1 day. head(res$feed_time_hour) # Monitor feed intake in each hour over the last 1 day. head(res$feed_intake_hour)  # Monitor all by hands monitor_all(csv_data, begin_date = \"2024-05-01\", days = 5, save_path = \"C:/Users/Dell/Downloads/test\")  # Set a monitor task monitor_schedule(   taskname = \"ppt_csv_monitor\",   schedule = \"DAILY\",   starttime = \"10:05\",   startdate = format(Sys.Date(), \"%Y/%m/%d\"),   rscript_args = list(house_width = \"1\",                        days = 5,                       begin_date = \"2024-05-01\",                        csv_path = \"C:/Users/Dell/Documents/projects/pptsdm_data\",                       save_path = \"C:/Users/Dell/Downloads/test\")) # Delete monitor task taskscheduleR::taskscheduler_delete(\"ppt_csv_monitor\")  # Use hour_stat() data <- data_csv[, date := as.Date(visit_time)]  # Use nest_dt() in tidyfst res <- data.table::copy(data) |>   nest_dt(date, .name = \"data\") |>   mutate_dt(data = map2(date, data, \\(x, y) hour_stat(data = y, target_date = x))) |>   mutate_dt(data = map(data, \\(x) x$feed_intake)) |>   unnest_dt(\"data\")    # Use functions in tidyverse ## functions about hour_stat() my_function <- function(x) {   x <- data.table::as.data.table(x)   date = unique(x$date)   res <- hour_stat(data = x, target_date = date)   res$feed_intake } ## Use group_split() in tidyverse data_split <- data |>   as.data.frame() |>   group_split(date)  names(data_split) <- data_split |>   map(.f = ~pull(.x, date)) |>   map(.f = ~as.character(.x)) |>   map(.f = ~unique(.x))   res <- data_split |>   map(., \\(x) my_function(x)) |>   map(as.data.frame) |>   bind_rows(.id = \"date\")  ## Use group_nest() in tidyverse res <- data |>   as.data.frame() |>   group_nest(date, keep = T) |>   mutate(data = map(data, \\(x) my_function(x))) |>   unnest(data)"},{"path":"https://tony2015116.github.io/mintyr/reference/combn_pair.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate and Combine Pairs of Columns and Nest Data — combn_pair","title":"Generate and Combine Pairs of Columns and Nest Data — combn_pair","text":"combn_pair function generates combinations specified columns, combines , nests data specified columns. supports data.table data.frame inputs allows optional grouping.","code":""},{"path":"https://tony2015116.github.io/mintyr/reference/combn_pair.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate and Combine Pairs of Columns and Nest Data — combn_pair","text":"","code":"combn_pair(data, cols_bind, by = NULL, pairs_n = 2, sep = \"-\")"},{"path":"https://tony2015116.github.io/mintyr/reference/combn_pair.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate and Combine Pairs of Columns and Nest Data — combn_pair","text":"data data.table data.frame. input data. cols_bind character vector. columns combine pairs. character vector, optional. Columns group . Default NULL. pairs_n integer, optional. number columns include combination. Default 2. sep character, optional. separator use combining column names. Default \"-\".","code":""},{"path":"https://tony2015116.github.io/mintyr/reference/combn_pair.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate and Combine Pairs of Columns and Nest Data — combn_pair","text":"data.table. nested data.table combined column pairs. NULL, returns data.table nested 'pairs'. specified, returns data.table nested 'pairs' grouping variables.","code":""},{"path":"https://tony2015116.github.io/mintyr/reference/combn_pair.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Generate and Combine Pairs of Columns and Nest Data — combn_pair","text":"cols_bind parameter must character vector column names. pairs_n parameter must positive integer greater equal 2. sep parameter must single character string. Ensure grouping variables specified present data.","code":""},{"path":"https://tony2015116.github.io/mintyr/reference/combn_pair.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate and Combine Pairs of Columns and Nest Data — combn_pair","text":"","code":"col_names <- c(\"Sepal.Length\", \"Sepal.Width\", \"Petal.Length\") combn_pair(iris, cols_bind = col_names, pairs_n = 2, sep = \"&\") #>                        pairs                data #>                       <char>              <list> #> 1:  Sepal.Length&Sepal.Width <data.table[150x4]> #> 2: Sepal.Length&Petal.Length <data.table[150x4]> #> 3:  Sepal.Width&Petal.Length <data.table[150x4]> combn_pair(iris, cols_bind = col_names, pairs_n = 2, by = \"Species\") #>                        pairs    Species               data #>                       <char>     <fctr>             <list> #> 1:  Sepal.Length-Sepal.Width     setosa <data.table[50x3]> #> 2:  Sepal.Length-Sepal.Width versicolor <data.table[50x3]> #> 3:  Sepal.Length-Sepal.Width  virginica <data.table[50x3]> #> 4: Sepal.Length-Petal.Length     setosa <data.table[50x3]> #> 5: Sepal.Length-Petal.Length versicolor <data.table[50x3]> #> 6: Sepal.Length-Petal.Length  virginica <data.table[50x3]> #> 7:  Sepal.Width-Petal.Length     setosa <data.table[50x3]> #> 8:  Sepal.Width-Petal.Length versicolor <data.table[50x3]> #> 9:  Sepal.Width-Petal.Length  virginica <data.table[50x3]>"},{"path":"https://tony2015116.github.io/mintyr/reference/get_filename.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract specific parts of the file path — get_filename","title":"Extract specific parts of the file path — get_filename","text":"function extracts base name file(s) given path(s), options remove file extension /directory path.","code":""},{"path":"https://tony2015116.github.io/mintyr/reference/get_filename.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract specific parts of the file path — get_filename","text":"","code":"get_filename(paths, remove_extension = TRUE, remove_path = TRUE)"},{"path":"https://tony2015116.github.io/mintyr/reference/get_filename.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract specific parts of the file path — get_filename","text":"paths character vector. string character vector representing full path(s) file(s). remove_extension logical, optional. TRUE, file extensions removed filenames. Default TRUE. remove_path logical, optional. TRUE, directory paths removed, leaving filenames. Default TRUE.","code":""},{"path":"https://tony2015116.github.io/mintyr/reference/get_filename.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract specific parts of the file path — get_filename","text":"character vector. string character vector representing processed file name(s).","code":""},{"path":"https://tony2015116.github.io/mintyr/reference/get_filename.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Extract specific parts of the file path — get_filename","text":"Ensure paths parameter character vector. function stop error paths character vector.","code":""},{"path":"https://tony2015116.github.io/mintyr/reference/get_filename.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract specific parts of the file path — get_filename","text":"","code":"xlsx_files <- mintyr_example(mintyr_examples(\"xlsx_test\")) xlsx_files #> [1] \"/home/runner/work/_temp/Library/mintyr/extdata/xlsx_test1.xlsx\" #> [2] \"/home/runner/work/_temp/Library/mintyr/extdata/xlsx_test2.xlsx\" get_filename(xlsx_files) #> [1] \"xlsx_test1\" \"xlsx_test2\" get_filename(xlsx_files, remove_extension = FALSE) #> [1] \"xlsx_test1.xlsx\" \"xlsx_test2.xlsx\" get_filename(xlsx_files, remove_path = FALSE) #> [1] \"/home/runner/work/_temp/Library/mintyr/extdata/xlsx_test1\" #> [2] \"/home/runner/work/_temp/Library/mintyr/extdata/xlsx_test2\""},{"path":"https://tony2015116.github.io/mintyr/reference/import_csv.html","id":null,"dir":"Reference","previous_headings":"","what":"Import CSV Files Using Specified Package — import_csv","title":"Import CSV Files Using Specified Package — import_csv","text":"import_csv function imports one multiple CSV files using specified package (data.table, vroom, arrow). supports row binding multiple files single dataset optional labeling origin file.","code":""},{"path":"https://tony2015116.github.io/mintyr/reference/import_csv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import CSV Files Using Specified Package — import_csv","text":"","code":"import_csv(file, package = \"data.table\", rbind = TRUE, rbind_label = NULL, ...)"},{"path":"https://tony2015116.github.io/mintyr/reference/import_csv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import CSV Files Using Specified Package — import_csv","text":"file character vector file paths. paths CSV files imported.. paths must point existing files. package character, optional. Specifies package use reading CSV files. Default 'data.table'. Valid options data.table, vroom, arrow. rbind logical, optional. TRUE one file specified, binds rows different files one dataset. Default TRUE. Note: vroom, row binding inherent turned . rbind_label character, optional. name column add dataset indicates file origin. useful row binding used. Default NULL. ... Additional arguments passed import_csv().arguments vary depending R package chosen.","code":""},{"path":"https://tony2015116.github.io/mintyr/reference/import_csv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import CSV Files Using Specified Package — import_csv","text":"Depending input settings, returns data.table list data.tables. rbind TRUE one file processed, returns single data.table files combined. rbind FALSE one file provided, returns data table single file processed.","code":""},{"path":"https://tony2015116.github.io/mintyr/reference/import_csv.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Import CSV Files Using Specified Package — import_csv","text":"function stops throws error file exist unsupported package specified. vroom package inherently binds rows reading multiple files support turning feature.","code":""},{"path":[]},{"path":"https://tony2015116.github.io/mintyr/reference/import_csv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import CSV Files Using Specified Package — import_csv","text":"","code":"csv_files <- mintyr_example(mintyr_examples(\"csv_test\")) csv_files #> [1] \"/home/runner/work/_temp/Library/mintyr/extdata/csv_test1.csv\" #> [2] \"/home/runner/work/_temp/Library/mintyr/extdata/csv_test2.csv\" import_csv(csv_files) #>     col1   col2   col3 #>    <int> <char> <lgcl> #> 1:     4      d  FALSE #> 2:     5      f   TRUE #> 3:     6      e   TRUE #> 4:    15      o  FALSE #> 5:    16      p   TRUE #> 6:    17      q  FALSE"},{"path":"https://tony2015116.github.io/mintyr/reference/import_xlsx.html","id":null,"dir":"Reference","previous_headings":"","what":"Import list of xlsx sheets — import_xlsx","title":"Import list of xlsx sheets — import_xlsx","text":"import_xlsx function reads data Excel files, optionally specified sheets, can either merge data multiple files keep separate.","code":""},{"path":"https://tony2015116.github.io/mintyr/reference/import_xlsx.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import list of xlsx sheets — import_xlsx","text":"","code":"import_xlsx(file, rbind = TRUE, sheet = NULL, ...)"},{"path":"https://tony2015116.github.io/mintyr/reference/import_xlsx.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import list of xlsx sheets — import_xlsx","text":"file character vector file paths. Paths Excel files imported. paths must point existing files. rbind logical, optional. TRUE one file specified, binds rows different files one dataset. Default TRUE. Note: vroom, row binding inherent turned . sheet numeric vector NULL, optional. Specifies sheets read file. NULL, sheets read. numeric, specified sheets (index) read. Default NULL. ... Additional arguments passed readxl::read_excel() function, col_types specify column data types.","code":""},{"path":"https://tony2015116.github.io/mintyr/reference/import_xlsx.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import list of xlsx sheets — import_xlsx","text":"Depending rbind parameter: rbind TRUE, returns single data.table combining files sheets, additional 'excel_name' column indicating source file. rbind FALSE, returns named list data.tables, representing data sheet, named combining file sheet names.","code":""},{"path":"https://tony2015116.github.io/mintyr/reference/import_xlsx.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Import list of xlsx sheets — import_xlsx","text":"Make sure file paths provided valid exist. function stop error file exist sheet indices range.","code":""},{"path":"https://tony2015116.github.io/mintyr/reference/import_xlsx.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import list of xlsx sheets — import_xlsx","text":"","code":"xlsx_files <- mintyr_example(mintyr_examples(\"xlsx_test\")) xlsx_files #> [1] \"/home/runner/work/_temp/Library/mintyr/extdata/xlsx_test1.xlsx\" #> [2] \"/home/runner/work/_temp/Library/mintyr/extdata/xlsx_test2.xlsx\" import_xlsx(xlsx_files) #>     excel_name sheet_name  col1   col2   col3 #>         <char>     <char> <num> <char> <lgcl> #>  1: xlsx_test1     Sheet1     4      d  FALSE #>  2: xlsx_test1     Sheet1     5      f   TRUE #>  3: xlsx_test1     Sheet1     6      e   TRUE #>  4: xlsx_test1     Sheet2     1      a   TRUE #>  5: xlsx_test1     Sheet2     2      b  FALSE #>  6: xlsx_test1     Sheet2     3      c   TRUE #>  7: xlsx_test2     Sheet1    15      o  FALSE #>  8: xlsx_test2     Sheet1    16      p   TRUE #>  9: xlsx_test2     Sheet1    17      q  FALSE #> 10: xlsx_test2          a     7      g  FALSE #> 11: xlsx_test2          a     9      h   TRUE #> 12: xlsx_test2          a     8      i  FALSE #> 13: xlsx_test2          b    10      J  FALSE #> 14: xlsx_test2          b    11      K   TRUE #> 15: xlsx_test2          b    12      L  FALSE"},{"path":"https://tony2015116.github.io/mintyr/reference/mintyr_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Get path to mintyr examples — mintyr_example","title":"Get path to mintyr examples — mintyr_example","text":"mintyr comes bundled number sample files 'inst/extdata' directory. Use vroom_example() retrieve path one example.","code":""},{"path":"https://tony2015116.github.io/mintyr/reference/mintyr_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get path to mintyr examples — mintyr_example","text":"","code":"mintyr_example(path)"},{"path":"https://tony2015116.github.io/mintyr/reference/mintyr_example.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get path to mintyr examples — mintyr_example","text":"path Name file.","code":""},{"path":[]},{"path":"https://tony2015116.github.io/mintyr/reference/mintyr_example.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get path to mintyr examples — mintyr_example","text":"","code":"mintyr_example(\"csv_test1.csv\") #> [1] \"/home/runner/work/_temp/Library/mintyr/extdata/csv_test1.csv\""},{"path":"https://tony2015116.github.io/mintyr/reference/mintyr_examples.html","id":null,"dir":"Reference","previous_headings":"","what":"Get path to one example — mintyr_examples","title":"Get path to one example — mintyr_examples","text":"vroom comes bundled number sample files 'inst/extdata' directory. Use vroom_examples() list available examples.","code":""},{"path":"https://tony2015116.github.io/mintyr/reference/mintyr_examples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get path to one example — mintyr_examples","text":"","code":"mintyr_examples(pattern = NULL)"},{"path":"https://tony2015116.github.io/mintyr/reference/mintyr_examples.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get path to one example — mintyr_examples","text":"pattern regular expression filenames match. NULL, available files returned.","code":""},{"path":[]},{"path":"https://tony2015116.github.io/mintyr/reference/mintyr_examples.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get path to one example — mintyr_examples","text":"","code":"mintyr_examples() #> [1] \"csv_test1.csv\"   \"csv_test2.csv\"   \"xlsx_test1.xlsx\" \"xlsx_test2.xlsx\""},{"path":"https://tony2015116.github.io/mintyr/reference/nest_cv.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply Cross-Validation to Nested Data Tables — nest_cv","title":"Apply Cross-Validation to Nested Data Tables — nest_cv","text":"nest_cv function performs cross-validation nested data tables within data.table. supports various cross-validation configurations handles nested lists data tables.","code":""},{"path":"https://tony2015116.github.io/mintyr/reference/nest_cv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply Cross-Validation to Nested Data Tables — nest_cv","text":"","code":"nest_cv(   nest_dt,   v = 10,   repeats = 1,   strata = NULL,   breaks = 4,   pool = 0.1,   ... )"},{"path":"https://tony2015116.github.io/mintyr/reference/nest_cv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply Cross-Validation to Nested Data Tables — nest_cv","text":"nest_dt data.table. input data table containing nested data tables. v number partitions data set. repeats number times repeat V-fold partitioning. strata variable data (single character name) used conduct stratified sampling. NULL, resample created within stratification variable. Numeric strata binned quartiles. breaks single number giving number bins desired stratify numeric stratification variable. pool proportion data used determine particular group small pooled another group. recommend decreasing argument default 0.1 dangers stratifying groups small. ... dots future extensions must empty.","code":""},{"path":"https://tony2015116.github.io/mintyr/reference/nest_cv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply Cross-Validation to Nested Data Tables — nest_cv","text":"data.table. data.table cross-validation splits applied nested data tables.","code":""},{"path":"https://tony2015116.github.io/mintyr/reference/nest_cv.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Apply Cross-Validation to Nested Data Tables — nest_cv","text":"nest_dt parameter must data.table containing least one nested list column data tables. function copy input data.table avoid modifying original data.","code":""},{"path":"https://tony2015116.github.io/mintyr/reference/nest_cv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply Cross-Validation to Nested Data Tables — nest_cv","text":"","code":"dt_nest <- w2l_nest(data = iris, cols2l = 1:2, by = \"Species\") nest_cv(nest_dt = dt_nest, v = 2, repeats = 2) #>             name    Species                   splits     id              train #>           <fctr>     <fctr>                   <list> <char>             <list> #>  1: Sepal.Length     setosa <vfold_split[45x5x50x3]> Fold01 <data.table[45x3]> #>  2: Sepal.Length     setosa <vfold_split[45x5x50x3]> Fold02 <data.table[45x3]> #>  3: Sepal.Length     setosa <vfold_split[45x5x50x3]> Fold03 <data.table[45x3]> #>  4: Sepal.Length     setosa <vfold_split[45x5x50x3]> Fold04 <data.table[45x3]> #>  5: Sepal.Length     setosa <vfold_split[45x5x50x3]> Fold05 <data.table[45x3]> #>  6: Sepal.Length     setosa <vfold_split[45x5x50x3]> Fold06 <data.table[45x3]> #>  7: Sepal.Length     setosa <vfold_split[45x5x50x3]> Fold07 <data.table[45x3]> #>  8: Sepal.Length     setosa <vfold_split[45x5x50x3]> Fold08 <data.table[45x3]> #>  9: Sepal.Length     setosa <vfold_split[45x5x50x3]> Fold09 <data.table[45x3]> #> 10: Sepal.Length     setosa <vfold_split[45x5x50x3]> Fold10 <data.table[45x3]> #> 11: Sepal.Length versicolor <vfold_split[45x5x50x3]> Fold01 <data.table[45x3]> #> 12: Sepal.Length versicolor <vfold_split[45x5x50x3]> Fold02 <data.table[45x3]> #> 13: Sepal.Length versicolor <vfold_split[45x5x50x3]> Fold03 <data.table[45x3]> #> 14: Sepal.Length versicolor <vfold_split[45x5x50x3]> Fold04 <data.table[45x3]> #> 15: Sepal.Length versicolor <vfold_split[45x5x50x3]> Fold05 <data.table[45x3]> #> 16: Sepal.Length versicolor <vfold_split[45x5x50x3]> Fold06 <data.table[45x3]> #> 17: Sepal.Length versicolor <vfold_split[45x5x50x3]> Fold07 <data.table[45x3]> #> 18: Sepal.Length versicolor <vfold_split[45x5x50x3]> Fold08 <data.table[45x3]> #> 19: Sepal.Length versicolor <vfold_split[45x5x50x3]> Fold09 <data.table[45x3]> #> 20: Sepal.Length versicolor <vfold_split[45x5x50x3]> Fold10 <data.table[45x3]> #> 21: Sepal.Length  virginica <vfold_split[45x5x50x3]> Fold01 <data.table[45x3]> #> 22: Sepal.Length  virginica <vfold_split[45x5x50x3]> Fold02 <data.table[45x3]> #> 23: Sepal.Length  virginica <vfold_split[45x5x50x3]> Fold03 <data.table[45x3]> #> 24: Sepal.Length  virginica <vfold_split[45x5x50x3]> Fold04 <data.table[45x3]> #> 25: Sepal.Length  virginica <vfold_split[45x5x50x3]> Fold05 <data.table[45x3]> #> 26: Sepal.Length  virginica <vfold_split[45x5x50x3]> Fold06 <data.table[45x3]> #> 27: Sepal.Length  virginica <vfold_split[45x5x50x3]> Fold07 <data.table[45x3]> #> 28: Sepal.Length  virginica <vfold_split[45x5x50x3]> Fold08 <data.table[45x3]> #> 29: Sepal.Length  virginica <vfold_split[45x5x50x3]> Fold09 <data.table[45x3]> #> 30: Sepal.Length  virginica <vfold_split[45x5x50x3]> Fold10 <data.table[45x3]> #> 31:  Sepal.Width     setosa <vfold_split[45x5x50x3]> Fold01 <data.table[45x3]> #> 32:  Sepal.Width     setosa <vfold_split[45x5x50x3]> Fold02 <data.table[45x3]> #> 33:  Sepal.Width     setosa <vfold_split[45x5x50x3]> Fold03 <data.table[45x3]> #> 34:  Sepal.Width     setosa <vfold_split[45x5x50x3]> Fold04 <data.table[45x3]> #> 35:  Sepal.Width     setosa <vfold_split[45x5x50x3]> Fold05 <data.table[45x3]> #> 36:  Sepal.Width     setosa <vfold_split[45x5x50x3]> Fold06 <data.table[45x3]> #> 37:  Sepal.Width     setosa <vfold_split[45x5x50x3]> Fold07 <data.table[45x3]> #> 38:  Sepal.Width     setosa <vfold_split[45x5x50x3]> Fold08 <data.table[45x3]> #> 39:  Sepal.Width     setosa <vfold_split[45x5x50x3]> Fold09 <data.table[45x3]> #> 40:  Sepal.Width     setosa <vfold_split[45x5x50x3]> Fold10 <data.table[45x3]> #> 41:  Sepal.Width versicolor <vfold_split[45x5x50x3]> Fold01 <data.table[45x3]> #> 42:  Sepal.Width versicolor <vfold_split[45x5x50x3]> Fold02 <data.table[45x3]> #> 43:  Sepal.Width versicolor <vfold_split[45x5x50x3]> Fold03 <data.table[45x3]> #> 44:  Sepal.Width versicolor <vfold_split[45x5x50x3]> Fold04 <data.table[45x3]> #> 45:  Sepal.Width versicolor <vfold_split[45x5x50x3]> Fold05 <data.table[45x3]> #> 46:  Sepal.Width versicolor <vfold_split[45x5x50x3]> Fold06 <data.table[45x3]> #> 47:  Sepal.Width versicolor <vfold_split[45x5x50x3]> Fold07 <data.table[45x3]> #> 48:  Sepal.Width versicolor <vfold_split[45x5x50x3]> Fold08 <data.table[45x3]> #> 49:  Sepal.Width versicolor <vfold_split[45x5x50x3]> Fold09 <data.table[45x3]> #> 50:  Sepal.Width versicolor <vfold_split[45x5x50x3]> Fold10 <data.table[45x3]> #> 51:  Sepal.Width  virginica <vfold_split[45x5x50x3]> Fold01 <data.table[45x3]> #> 52:  Sepal.Width  virginica <vfold_split[45x5x50x3]> Fold02 <data.table[45x3]> #> 53:  Sepal.Width  virginica <vfold_split[45x5x50x3]> Fold03 <data.table[45x3]> #> 54:  Sepal.Width  virginica <vfold_split[45x5x50x3]> Fold04 <data.table[45x3]> #> 55:  Sepal.Width  virginica <vfold_split[45x5x50x3]> Fold05 <data.table[45x3]> #> 56:  Sepal.Width  virginica <vfold_split[45x5x50x3]> Fold06 <data.table[45x3]> #> 57:  Sepal.Width  virginica <vfold_split[45x5x50x3]> Fold07 <data.table[45x3]> #> 58:  Sepal.Width  virginica <vfold_split[45x5x50x3]> Fold08 <data.table[45x3]> #> 59:  Sepal.Width  virginica <vfold_split[45x5x50x3]> Fold09 <data.table[45x3]> #> 60:  Sepal.Width  virginica <vfold_split[45x5x50x3]> Fold10 <data.table[45x3]> #>             name    Species                   splits     id              train #>              validate #>                <list> #>  1: <data.table[5x3]> #>  2: <data.table[5x3]> #>  3: <data.table[5x3]> #>  4: <data.table[5x3]> #>  5: <data.table[5x3]> #>  6: <data.table[5x3]> #>  7: <data.table[5x3]> #>  8: <data.table[5x3]> #>  9: <data.table[5x3]> #> 10: <data.table[5x3]> #> 11: <data.table[5x3]> #> 12: <data.table[5x3]> #> 13: <data.table[5x3]> #> 14: <data.table[5x3]> #> 15: <data.table[5x3]> #> 16: <data.table[5x3]> #> 17: <data.table[5x3]> #> 18: <data.table[5x3]> #> 19: <data.table[5x3]> #> 20: <data.table[5x3]> #> 21: <data.table[5x3]> #> 22: <data.table[5x3]> #> 23: <data.table[5x3]> #> 24: <data.table[5x3]> #> 25: <data.table[5x3]> #> 26: <data.table[5x3]> #> 27: <data.table[5x3]> #> 28: <data.table[5x3]> #> 29: <data.table[5x3]> #> 30: <data.table[5x3]> #> 31: <data.table[5x3]> #> 32: <data.table[5x3]> #> 33: <data.table[5x3]> #> 34: <data.table[5x3]> #> 35: <data.table[5x3]> #> 36: <data.table[5x3]> #> 37: <data.table[5x3]> #> 38: <data.table[5x3]> #> 39: <data.table[5x3]> #> 40: <data.table[5x3]> #> 41: <data.table[5x3]> #> 42: <data.table[5x3]> #> 43: <data.table[5x3]> #> 44: <data.table[5x3]> #> 45: <data.table[5x3]> #> 46: <data.table[5x3]> #> 47: <data.table[5x3]> #> 48: <data.table[5x3]> #> 49: <data.table[5x3]> #> 50: <data.table[5x3]> #> 51: <data.table[5x3]> #> 52: <data.table[5x3]> #> 53: <data.table[5x3]> #> 54: <data.table[5x3]> #> 55: <data.table[5x3]> #> 56: <data.table[5x3]> #> 57: <data.table[5x3]> #> 58: <data.table[5x3]> #> 59: <data.table[5x3]> #> 60: <data.table[5x3]> #>              validate"},{"path":"https://tony2015116.github.io/mintyr/reference/top_perc.html","id":null,"dir":"Reference","previous_headings":"","what":"Select Top Percentage of Data and Compute Summary Statistics — top_perc","title":"Select Top Percentage of Data and Compute Summary Statistics — top_perc","text":"top_perc function selects top percentage data based specified trait computes summary statistics. allows grouping additional columns offers flexibility type statistics calculated. function can also retain selected data needed.","code":""},{"path":"https://tony2015116.github.io/mintyr/reference/top_perc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select Top Percentage of Data and Compute Summary Statistics — top_perc","text":"","code":"top_perc(data, perc, trait, by = NULL, type = \"mean_sd\", keep_data = FALSE)"},{"path":"https://tony2015116.github.io/mintyr/reference/top_perc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select Top Percentage of Data and Compute Summary Statistics — top_perc","text":"data data.frame. input data frame. perc numeric vector. vector percentages select top data. element numeric value -1 1. trait character. name column data base selection. character vector, optional. names columns group . Default NULL. type type summary statistics. Possible values include: \"full\", \"common\", \"robust\",  \"five_number\", \"mean_sd\", \"mean_se\", \"mean_ci\", \"median_iqr\", \"median_mad\", \"quantile\", \"mean\", \"median\",  \"min\", \"max\" keep_data logical, optional. TRUE, function returns summary statistics selected top data. Default FALSE.","code":""},{"path":"https://tony2015116.github.io/mintyr/reference/top_perc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select Top Percentage of Data and Compute Summary Statistics — top_perc","text":"list data frame: keep_data FALSE, data frame summary statistics. keep_data TRUE, list element list containing summary statistics (stat) selected top data (data).","code":""},{"path":"https://tony2015116.github.io/mintyr/reference/top_perc.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Select Top Percentage of Data and Compute Summary Statistics — top_perc","text":"perc parameter accepts values -1 1. Positive values select top percentage, negative values select bottom percentage. function performs initial checks ensure required arguments provided valid. Grouping additional columns () optional allows granular analysis. type parameter specifies type summary statistics compute, \"mean_sd\" default. keep_data set TRUE, function return summary statistics selected top data percentage.","code":""},{"path":"https://tony2015116.github.io/mintyr/reference/top_perc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select Top Percentage of Data and Compute Summary Statistics — top_perc","text":"","code":"top_perc(iris, perc = 0.5, trait = \"Petal.Width\", by = \"Species\") #> # A tibble: 3 × 6 #>   Species    variable        n  mean    sd top_perc #>   <fct>      <fct>       <dbl> <dbl> <dbl> <chr>    #> 1 setosa     Petal.Width    45 0.262 0.098 50%      #> 2 versicolor Petal.Width    35 1.43  0.13  50%      #> 3 virginica  Petal.Width    29 2.22  0.165 50%"},{"path":"https://tony2015116.github.io/mintyr/reference/w2l_nest.html","id":null,"dir":"Reference","previous_headings":"","what":"Reshape Wide Data to Long and Nest by Specified Columns — w2l_nest","title":"Reshape Wide Data to Long and Nest by Specified Columns — w2l_nest","text":"w2l_nest function reshapes wide-format data long-format nests specified columns. designed handle data.frame data.table objects provides options grouping data.","code":""},{"path":"https://tony2015116.github.io/mintyr/reference/w2l_nest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reshape Wide Data to Long and Nest by Specified Columns — w2l_nest","text":"","code":"w2l_nest(data, cols2l, by = NULL)"},{"path":"https://tony2015116.github.io/mintyr/reference/w2l_nest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reshape Wide Data to Long and Nest by Specified Columns — w2l_nest","text":"data data.frame data.table. input data wide format. cols2l numeric character vector. Specifies columns reshape wide long format. Can either numeric indices column names. character vector, optional. Specifies columns group . Default NULL.","code":""},{"path":"https://tony2015116.github.io/mintyr/reference/w2l_nest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reshape Wide Data to Long and Nest by Specified Columns — w2l_nest","text":"data.table. data.table nested data long format, grouped specified columns provided. NULL, returns data.table nested 'name'. specified, returns data.table nested 'name' grouping variables.","code":""},{"path":"https://tony2015116.github.io/mintyr/reference/w2l_nest.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Reshape Wide Data to Long and Nest by Specified Columns — w2l_nest","text":"cols2l parameter either numeric indices character vector column names. Ensure grouping variables specified present data. function converts data.frame data.table necessary.","code":""},{"path":"https://tony2015116.github.io/mintyr/reference/w2l_nest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reshape Wide Data to Long and Nest by Specified Columns — w2l_nest","text":"","code":"w2l_nest(data = iris, cols2l = 1:4) #>            name                data #>          <fctr>              <list> #> 1: Sepal.Length <data.table[150x2]> #> 2:  Sepal.Width <data.table[150x2]> #> 3: Petal.Length <data.table[150x2]> #> 4:  Petal.Width <data.table[150x2]> w2l_nest(data = iris, cols2l = c(\"Sepal.Length\", \"Sepal.Width\", \"Petal.Length\"), by = \"Species\") #>            name    Species               data #>          <fctr>     <fctr>             <list> #> 1: Sepal.Length     setosa <data.table[50x2]> #> 2: Sepal.Length versicolor <data.table[50x2]> #> 3: Sepal.Length  virginica <data.table[50x2]> #> 4:  Sepal.Width     setosa <data.table[50x2]> #> 5:  Sepal.Width versicolor <data.table[50x2]> #> 6:  Sepal.Width  virginica <data.table[50x2]> #> 7: Petal.Length     setosa <data.table[50x2]> #> 8: Petal.Length versicolor <data.table[50x2]> #> 9: Petal.Length  virginica <data.table[50x2]>"},{"path":"https://tony2015116.github.io/mintyr/reference/w2l_split.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Wide Data to Long Format and Split into List of Data Tables — w2l_split","title":"Convert Wide Data to Long Format and Split into List of Data Tables — w2l_split","text":"w2l_split function reshapes wide-format data long-format splits list data tables, corresponding one specified columns.","code":""},{"path":"https://tony2015116.github.io/mintyr/reference/w2l_split.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Wide Data to Long Format and Split into List of Data Tables — w2l_split","text":"","code":"w2l_split(data, cols2l)"},{"path":"https://tony2015116.github.io/mintyr/reference/w2l_split.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Wide Data to Long Format and Split into List of Data Tables — w2l_split","text":"data data.frame data.table. input data wide format. cols2l numeric character vector. Specifies columns reshape wide long format. Can either numeric indices column names.","code":""},{"path":"https://tony2015116.github.io/mintyr/reference/w2l_split.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Wide Data to Long Format and Split into List of Data Tables — w2l_split","text":"list data tables. data table list corresponds one specified columns, reshaped long format.","code":""},{"path":"https://tony2015116.github.io/mintyr/reference/w2l_split.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Convert Wide Data to Long Format and Split into List of Data Tables — w2l_split","text":"cols2l parameter either numeric indices character vector column names. Ensure specified columns cols2l present data. function converts data.frame data.table necessary.","code":""},{"path":"https://tony2015116.github.io/mintyr/reference/w2l_split.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Wide Data to Long Format and Split into List of Data Tables — w2l_split","text":"","code":"w2l_split(data = iris, cols2l = 1:3) #> $Sepal.Length #>      Petal.Width   Species     variable value #>            <num>    <fctr>       <fctr> <num> #>   1:         0.2    setosa Sepal.Length   5.1 #>   2:         0.2    setosa Sepal.Length   4.9 #>   3:         0.2    setosa Sepal.Length   4.7 #>   4:         0.2    setosa Sepal.Length   4.6 #>   5:         0.2    setosa Sepal.Length   5.0 #>  ---                                          #> 146:         2.3 virginica Sepal.Length   6.7 #> 147:         1.9 virginica Sepal.Length   6.3 #> 148:         2.0 virginica Sepal.Length   6.5 #> 149:         2.3 virginica Sepal.Length   6.2 #> 150:         1.8 virginica Sepal.Length   5.9 #>  #> $Sepal.Width #>      Petal.Width   Species    variable value #>            <num>    <fctr>      <fctr> <num> #>   1:         0.2    setosa Sepal.Width   3.5 #>   2:         0.2    setosa Sepal.Width   3.0 #>   3:         0.2    setosa Sepal.Width   3.2 #>   4:         0.2    setosa Sepal.Width   3.1 #>   5:         0.2    setosa Sepal.Width   3.6 #>  ---                                         #> 146:         2.3 virginica Sepal.Width   3.0 #> 147:         1.9 virginica Sepal.Width   2.5 #> 148:         2.0 virginica Sepal.Width   3.0 #> 149:         2.3 virginica Sepal.Width   3.4 #> 150:         1.8 virginica Sepal.Width   3.0 #>  #> $Petal.Length #>      Petal.Width   Species     variable value #>            <num>    <fctr>       <fctr> <num> #>   1:         0.2    setosa Petal.Length   1.4 #>   2:         0.2    setosa Petal.Length   1.4 #>   3:         0.2    setosa Petal.Length   1.3 #>   4:         0.2    setosa Petal.Length   1.5 #>   5:         0.2    setosa Petal.Length   1.4 #>  ---                                          #> 146:         2.3 virginica Petal.Length   5.2 #> 147:         1.9 virginica Petal.Length   5.0 #> 148:         2.0 virginica Petal.Length   5.2 #> 149:         2.3 virginica Petal.Length   5.4 #> 150:         1.8 virginica Petal.Length   5.1 #>  w2l_split(data = iris, cols2l = c(\"Sepal.Length\", \"Sepal.Width\")) #> $Sepal.Length #>      Petal.Length Petal.Width   Species     variable value #>             <num>       <num>    <fctr>       <fctr> <num> #>   1:          1.4         0.2    setosa Sepal.Length   5.1 #>   2:          1.4         0.2    setosa Sepal.Length   4.9 #>   3:          1.3         0.2    setosa Sepal.Length   4.7 #>   4:          1.5         0.2    setosa Sepal.Length   4.6 #>   5:          1.4         0.2    setosa Sepal.Length   5.0 #>  ---                                                       #> 146:          5.2         2.3 virginica Sepal.Length   6.7 #> 147:          5.0         1.9 virginica Sepal.Length   6.3 #> 148:          5.2         2.0 virginica Sepal.Length   6.5 #> 149:          5.4         2.3 virginica Sepal.Length   6.2 #> 150:          5.1         1.8 virginica Sepal.Length   5.9 #>  #> $Sepal.Width #>      Petal.Length Petal.Width   Species    variable value #>             <num>       <num>    <fctr>      <fctr> <num> #>   1:          1.4         0.2    setosa Sepal.Width   3.5 #>   2:          1.4         0.2    setosa Sepal.Width   3.0 #>   3:          1.3         0.2    setosa Sepal.Width   3.2 #>   4:          1.5         0.2    setosa Sepal.Width   3.1 #>   5:          1.4         0.2    setosa Sepal.Width   3.6 #>  ---                                                      #> 146:          5.2         2.3 virginica Sepal.Width   3.0 #> 147:          5.0         1.9 virginica Sepal.Width   2.5 #> 148:          5.2         2.0 virginica Sepal.Width   3.0 #> 149:          5.4         2.3 virginica Sepal.Width   3.4 #> 150:          5.1         1.8 virginica Sepal.Width   3.0 #>"},{"path":"https://tony2015116.github.io/mintyr/news/index.html","id":"mintyr-001","dir":"Changelog","previous_headings":"","what":"mintyr 0.0.1","title":"mintyr 0.0.1","text":"Initial CRAN submission.","code":""}]
